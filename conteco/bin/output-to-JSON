#!/usr/bin/env bash
level="$1" # INFO (stdout) or ERROR (stderr)
while read -r INPUT
do

	# there are potentially three timestamps: from filebeat reading the log, from the container processing the output and the output itself
	# internal message must implement following properties in this order: origin, @timestamp, source, level,
  # when implementing custom handler: if INPUT starts with '{ "origin": ' then the message is generated by the platform and should be in format alreayd

	if [[ "$INPUT" == '{ "origin": '* ]] ; then

		printf '%s\n' "$INPUT"

	elif [[ "$INPUT" == '{'* ]] ; then

		timestamp=$( echo "$INPUT" | jq '."@timestamp"' )
		tags=$( echo "$INPUT" | jq '.tags' --compact-output )
		if [[ "$tags" == *"error"* ]] ; then
			level="error"
		elif [[ "$tags" == *"warning"* ]] ; then
			level="warn"
		else
			level="info"
		fi
		if [[ "$tags" == "[]" ]] ; then
			message=$( echo "$INPUT" | jq '.message' )
			printf '{ "origin": "%s", "@timestamp": "%s", "source": "httplogs", "level": "%s", "requestline":%s }\n' "$CONTECO_IMAGE" "${timestamp:1:${#timestamp}-2}" "$level" "$message"
		else
			pid=$( echo "$INPUT" | jq '.pid' )
			message=$( echo "$INPUT" | jq '.message' )
			message=$(echo "${message:1:${#message}-2} - ($pid) - ($tags)" | jq -aR .)
			printf '{ "origin": "%s", "@timestamp": "%s", "source": "logger", "level": "%s", "message":%s }\n' "$CONTECO_IMAGE" "${timestamp:1:${#timestamp}-2}" "$level" "$message"
		fi

	else

		timestamp=$( to-timestamp )
		message=$( echo "$INPUT" | jq -aR . )
		printf '{ "origin": "%s", "@timestamp": "%s", "source": "logger", "level": "%s", "message":%s }\n' "$CONTECO_IMAGE" "$timestamp" "$level" "$message"

	fi

done
